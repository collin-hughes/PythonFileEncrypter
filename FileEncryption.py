# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ProgramPage.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import Crypto
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import sys
import PyQt5
from Crypto.Protocol.KDF import scrypt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import * 
from PyQt5.QtGui import * 
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QPushButton, QAction, QLineEdit, QMessageBox, QRadioButton
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import (QLabel, QRadioButton, QPushButton, QVBoxLayout, QApplication, QWidget)
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget
import os 
from os import path
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.PublicKey import RSA
from Crypto.Protocol.KDF import scrypt
from Crypto.Random import get_random_bytes

salt = b"password"
password = "password"
key = scrypt(password, salt, 16, N=2**14, r=8, p=1)


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(502, 345)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(600,40,200,16)

        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(600, 80, 200, 60))

        self.label.setGeometry(QtCore.QRect(10, 10, 161, 16))
        self.label.setObjectName("label")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(10, 40, 95, 20))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(10, 70, 95, 20))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(10, 100, 95, 20))
        self.radioButton_3.setObjectName("radioButton_3")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(170, 190, 151, 71))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(320, 40, 113, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(190, 40, 151, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(190, 60, 121, 16))
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(320, 60, 113, 22))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(190, 80, 111, 16))
        self.label_4.setObjectName("label_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(320, 80, 113, 22))
        self.lineEdit_3.setObjectName("lineEdit_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 502, 26))
        self.menubar.setObjectName("menubar")
        self.menuEncryption_Password_Manager = QtWidgets.QMenu(self.menubar)
        self.menuEncryption_Password_Manager.setObjectName("menuEncryption_Password_Manager")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuEncryption_Password_Manager.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.label_2.hide()
        self.label_3.hide()
        self.label_4.hide()
        self.lineEdit.hide()
        self.lineEdit_2.hide()
        self.lineEdit_3.hide()
        self.label_5.hide()
        self.lineEdit_5.hide()

        ##Added
        self.radioButton.toggled.connect(self.rbtn1toggle)
        self.radioButton_2.toggled.connect(self.rbtn2toggle)
        self.radioButton_3.toggled.connect(self.rbtn3toggle)
        self.pushButton.clicked.connect(self.buttonClicked)

       
        
      

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "What would you like to do?"))
        self.radioButton.setText(_translate("MainWindow", "Create File?"))
        self.radioButton_2.setText(_translate("MainWindow", "Delete File?"))
        self.radioButton_3.setText(_translate("MainWindow", "View File?"))
        self.pushButton.setText(_translate("MainWindow", "Submit"))
        self.label_2.setText(_translate("MainWindow", "Enter File To Create"))
        self.label_3.setText(_translate("MainWindow", "Enter File To Delete"))
        self.label_4.setText(_translate("MainWindow", "Enter File To View"))
        self.label_5.setText(_translate("MainWindow", "Enter information for file"))
        self.menuEncryption_Password_Manager.setTitle(_translate("MainWindow", "Encryption/Password Manager"))


    def rbtn1toggle(self):
        radioBtn = self.sender()
        if radioBtn.isChecked():
            self.label_2.show() 
            self.lineEdit.show()
            self.label_5.show()
            self.lineEdit_5.show()
        else:
            self.label_2.hide()    
            self.lineEdit.hide()
            self.label_5.hide()
            self.lineEdit_5.hide()

    def rbtn2toggle(self):
        radioBtn = self.sender()
        if radioBtn.isChecked():
            self.label_3.show() 
            self.lineEdit_2.show()
        else:
            self.label_3.hide()   
            self.lineEdit_2.hide()  

    def rbtn3toggle(self):
        radioBtn = self.sender()
        if radioBtn.isChecked():
            self.label_4.show() 
            self.lineEdit_3.show()
        else:
            self.label_4.hide()  
            self.lineEdit_3.hide()

    def buttonClicked(self):
        if (self.radioButton.isChecked()) and os.path.exists(self.lineEdit.text()):
            print("File Already Exists")
        else:
            if(self.radioButton.isChecked()):
                data_str = self.lineEdit_5.text()
                print (data_str)
                data_str = bytes(data_str, 'utf-8')
                file_out = open(self.lineEdit.text(), "wb")
                cipher = AES.new(key, AES.MODE_EAX)
                ciphertext, tag = cipher.encrypt_and_digest(data_str)
                [ file_out.write(x) for x in (cipher.nonce, tag, ciphertext) ]
                file_out.close()
                print("File created successfully")
            else:
                if((self.radioButton_2.isChecked()) and os.path.exists(self.lineEdit_2.text())):
                    os.remove(self.lineEdit_2.text())
                    print("File deleted")
                else:
                    if((self.radioButton_3.isChecked()) and os.path.exists(self.lineEdit_3.text())):
                        file_in = open(self.lineEdit_3.text(), "rb")
                        nonce, tag, ciphertext = [ file_in.read(x) for x in (16, 16, -1) ]               
                        cipher = AES.new(key, AES.MODE_EAX, nonce)
                        data = cipher.decrypt_and_verify(ciphertext, tag)

                        print(data)
                    
                    else:
                        print("File doesn't exist")
            

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
